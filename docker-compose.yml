version: '3.8'

services:
  web:
    build: .
    command: sh -c "python manage.py wait_for_db && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - db
    environment:
      - DEBUG=1
      - DATABASE_URL=postgres://postgres:postgres@db:5432/jobportal
      - REDIS_URL=redis://redis:6379/0

  migrate:
    build: .
    command: sh -c "python manage.py wait_for_db && python manage.py makemigrations && python manage.py migrate"
    volumes:
      - .:/app
    depends_on:
      - db
    environment:
      - DEBUG=1
      - DATABASE_URL=postgres://postgres:postgres@db:5432/jobportal

  celery_worker:
    build: .
    command: sh -c "python manage.py wait_for_db && celery -A jobportal worker -l info"
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgres://postgres:postgres@db:5432/jobportal
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=jobportal.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db

  celery_beat:
    build: .
    command: sh -c "python manage.py wait_for_db && celery -A jobportal beat -l info"
    volumes:
      - .:/app
    environment:
      - DEBUG=1
      - DATABASE_URL=postgres://postgres:postgres@db:5432/jobportal
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_SETTINGS_MODULE=jobportal.settings
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - db
      - celery_worker

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=jobportal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
